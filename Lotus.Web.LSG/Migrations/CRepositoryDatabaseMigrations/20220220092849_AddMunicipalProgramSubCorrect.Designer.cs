// <auto-generated />
using System;
using Lotus.LSG;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Lotus.Web.LSG.Migrations.CRepositoryDatabaseMigrations
{
    [DbContext(typeof(CRepositoryDatabase))]
    [Migration("20220220092849_AddMunicipalProgramSubCorrect")]
    partial class AddMunicipalProgramSubCorrect
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Lotus.LSG.CAddressElement", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<string>("CadastralNumber")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("cadastral_number");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("сode");

                    b.Property<int>("ElementType")
                        .HasColumnType("int")
                        .HasColumnName("element_type");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("number");

                    b.Property<long>("StreetId")
                        .HasColumnType("bigint")
                        .HasColumnName("street_id");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("StreetId");

                    b.ToTable("address_item", (string)null);
                });

            modelBuilder.Entity("Lotus.LSG.CAddressStreet", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("names");

                    b.Property<int>("StreetType")
                        .HasColumnType("int")
                        .HasColumnName("street_type");

                    b.Property<long>("VillageId")
                        .HasColumnType("bigint")
                        .HasColumnName("village_id");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("VillageId");

                    b.ToTable("address_street", (string)null);
                });

            modelBuilder.Entity("Lotus.LSG.CAddressVillage", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("names");

                    b.Property<string>("OKATO")
                        .HasColumnType("longtext")
                        .HasColumnName("okato");

                    b.Property<string>("OKTMO")
                        .HasColumnType("longtext")
                        .HasColumnName("oktmo");

                    b.Property<string>("PostalCode")
                        .HasColumnType("longtext");

                    b.Property<long>("VillageSettlementId")
                        .HasColumnType("bigint")
                        .HasColumnName("village_sett_id");

                    b.Property<int>("VillageType")
                        .HasColumnType("int")
                        .HasColumnName("village_type");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("VillageSettlementId");

                    b.ToTable("address_village", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 100L,
                            Name = "Андреевский",
                            VillageSettlementId = 1L,
                            VillageType = 0
                        },
                        new
                        {
                            Id = 101L,
                            Name = "Мариинский",
                            VillageSettlementId = 1L,
                            VillageType = 0
                        },
                        new
                        {
                            Id = 200L,
                            Name = "Атамановский",
                            VillageSettlementId = 2L,
                            VillageType = 0
                        },
                        new
                        {
                            Id = 201L,
                            Name = "Степной",
                            VillageSettlementId = 2L,
                            VillageType = 0
                        });
                });

            modelBuilder.Entity("Lotus.LSG.CAddressVillageSettlement", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("names");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("sname");

                    b.Property<string>("VillageSettlementType")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("village_type");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("address_village_settlement", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Андреевское сельское поселение",
                            ShortName = "Андреевское СП",
                            VillageSettlementType = "Cельское поселение"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Атамановское сельское поселение",
                            ShortName = "Атамановское СП",
                            VillageSettlementType = "Cельское поселение"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "Белокаменское сельское поселение",
                            ShortName = "Белокаменское СП",
                            VillageSettlementType = "Cельское поселение"
                        },
                        new
                        {
                            Id = 4L,
                            Name = "Боровское сельское поселение",
                            ShortName = "Боровское СП",
                            VillageSettlementType = "Cельское поселение"
                        },
                        new
                        {
                            Id = 5L,
                            Name = "Брединское сельское поселение",
                            ShortName = "Брединское СП",
                            VillageSettlementType = "Cельское поселение"
                        },
                        new
                        {
                            Id = 6L,
                            Name = "Калининское сельское поселение",
                            ShortName = "Калининское СП",
                            VillageSettlementType = "Cельское поселение"
                        },
                        new
                        {
                            Id = 7L,
                            Name = "Княженское сельское поселение",
                            ShortName = "Княженское СП",
                            VillageSettlementType = "Cельское поселение"
                        },
                        new
                        {
                            Id = 8L,
                            Name = "Комсомольское сельское поселение",
                            ShortName = "Комсомольское СП",
                            VillageSettlementType = "Cельское поселение"
                        },
                        new
                        {
                            Id = 9L,
                            Name = "Наследницкое сельское поселение",
                            ShortName = "Наследницкое СП",
                            VillageSettlementType = "Cельское поселение"
                        },
                        new
                        {
                            Id = 10L,
                            Name = "Павловское сельское поселение",
                            ShortName = "Павловское СП",
                            VillageSettlementType = "Cельское поселение"
                        },
                        new
                        {
                            Id = 11L,
                            Name = "Рымникское сельское поселение",
                            ShortName = "Рымникское СП",
                            VillageSettlementType = "Cельское поселение"
                        });
                });

            modelBuilder.Entity("Lotus.LSG.CCertificateCompletion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<DateTime>("BeginPeriodDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("begin_period");

                    b.Property<DateTime>("ClosingDate")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("ContractId")
                        .HasColumnType("bigint")
                        .HasColumnName("contract_id");

                    b.Property<DateTime>("EndPeriodDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("end_period");

                    b.Property<string>("Group")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("group");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("verified");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("names");

                    b.Property<bool>("NotCalculation")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("not_calc");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("number");

                    b.Property<decimal>("PriceExtra")
                        .HasColumnType("decimal(12,2)")
                        .HasColumnName("price_extra");

                    b.Property<decimal>("PriceFederal")
                        .HasColumnType("decimal(12,2)")
                        .HasColumnName("price_federal");

                    b.Property<decimal>("PriceLocal")
                        .HasColumnType("decimal(12,2)")
                        .HasColumnName("price_local");

                    b.Property<decimal>("PriceRegional")
                        .HasColumnType("decimal(12,2)")
                        .HasColumnName("price_regional");

                    b.Property<double>("Value")
                        .HasColumnType("double")
                        .HasColumnName("value");

                    b.Property<string>("ValueUnit")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("value_unit");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("certificate_completion", (string)null);
                });

            modelBuilder.Entity("Lotus.LSG.CContract", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<long?>("CMunicipalProgramActivityId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ContractorId")
                        .HasColumnType("bigint")
                        .HasColumnName("contractor_id");

                    b.Property<long?>("CustomerId")
                        .HasColumnType("bigint")
                        .HasColumnName("customer_id");

                    b.Property<DateTime>("DateOfConclusion")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("date_conclusion");

                    b.Property<int>("Deadline")
                        .HasColumnType("int")
                        .HasColumnName("deadline");

                    b.Property<string>("Group")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("group");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("verified");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("names");

                    b.Property<bool>("NotCalculation")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("not_calc");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("number");

                    b.Property<decimal>("PriceExtra")
                        .HasColumnType("decimal(12,2)")
                        .HasColumnName("price_extra");

                    b.Property<decimal>("PriceFederal")
                        .HasColumnType("decimal(12,2)")
                        .HasColumnName("price_federal");

                    b.Property<decimal>("PriceLocal")
                        .HasColumnType("decimal(12,2)")
                        .HasColumnName("price_local");

                    b.Property<decimal>("PriceRegional")
                        .HasColumnType("decimal(12,2)")
                        .HasColumnName("price_regional");

                    b.Property<string>("SubGroup")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("subgroup");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("varchar(400)")
                        .HasColumnName("subject");

                    b.Property<double>("Value")
                        .HasColumnType("double")
                        .HasColumnName("value");

                    b.Property<string>("ValueUnit")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("value_unit");

                    b.HasKey("Id");

                    b.HasIndex("CMunicipalProgramActivityId");

                    b.HasIndex("ContractorId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("contract", (string)null);
                });

            modelBuilder.Entity("Lotus.LSG.CMunicipalProgram", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("begin_date");

                    b.Property<string>("Desc")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("desc");

                    b.Property<DateTime?>("EditionDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("edition_date");

                    b.Property<string>("EditionDocument")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("edition_document");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("end_date");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("verified");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("names");

                    b.Property<bool>("NotCalculation")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("not_calc");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("number");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("sname");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("municipal_program", (string)null);
                });

            modelBuilder.Entity("Lotus.LSG.CMunicipalProgramActivity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<long?>("ActivityId")
                        .HasColumnType("bigint")
                        .HasColumnName("activity_id");

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("begin_date");

                    b.Property<string>("Desc")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("desc");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("end_date");

                    b.Property<long?>("ExecutorId")
                        .IsRequired()
                        .HasColumnType("bigint")
                        .HasColumnName("executor_id");

                    b.Property<string>("Group")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("group");

                    b.Property<long?>("IndicatorId")
                        .IsRequired()
                        .HasColumnType("bigint")
                        .HasColumnName("indicator_id");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("verified");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("names");

                    b.Property<bool>("NotCalculation")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("not_calc");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("number");

                    b.Property<double>("PlanedValue")
                        .HasColumnType("double")
                        .HasColumnName("planed_value");

                    b.Property<decimal>("PriceExtra")
                        .HasColumnType("decimal(12,2)")
                        .HasColumnName("price_extra");

                    b.Property<decimal>("PriceFederal")
                        .HasColumnType("decimal(12,2)")
                        .HasColumnName("price_federal");

                    b.Property<decimal>("PriceLocal")
                        .HasColumnType("decimal(12,2)")
                        .HasColumnName("price_local");

                    b.Property<decimal>("PriceRegional")
                        .HasColumnType("decimal(12,2)")
                        .HasColumnName("price_regional");

                    b.Property<long?>("ProgramId")
                        .IsRequired()
                        .HasColumnType("bigint")
                        .HasColumnName("program_id");

                    b.Property<int>("Stage")
                        .HasColumnType("int")
                        .HasColumnName("stage");

                    b.Property<string>("SubGroup")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("subgroup");

                    b.Property<long?>("SubProgramId")
                        .IsRequired()
                        .HasColumnType("bigint")
                        .HasColumnName("sub_program_id");

                    b.HasKey("Id");

                    b.HasIndex("ActivityId");

                    b.HasIndex("ExecutorId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("IndicatorId");

                    b.HasIndex("ProgramId");

                    b.HasIndex("SubProgramId");

                    b.ToTable("municipal_activity", (string)null);
                });

            modelBuilder.Entity("Lotus.LSG.CMunicipalProgramIndicator", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<string>("Desc")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("desc");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("names");

                    b.Property<long?>("ProgramId")
                        .IsRequired()
                        .HasColumnType("bigint")
                        .HasColumnName("program_id");

                    b.Property<long?>("SubProgramId")
                        .IsRequired()
                        .HasColumnType("bigint")
                        .HasColumnName("sub_program_id");

                    b.Property<string>("ValueUnit")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasColumnName("value_unit");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("ProgramId");

                    b.HasIndex("SubProgramId");

                    b.ToTable("municipal_indicator", (string)null);
                });

            modelBuilder.Entity("Lotus.LSG.CMunicipalSubProgram", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<string>("Desc")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("desc");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("verified");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("names");

                    b.Property<bool>("NotCalculation")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("not_calc");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("number");

                    b.Property<long?>("ProgramId")
                        .HasColumnType("bigint")
                        .HasColumnName("program_id");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("sname");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("ProgramId");

                    b.ToTable("municipal_sub_program", (string)null);
                });

            modelBuilder.Entity("Lotus.LSG.CSubjectCivil", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("INN")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("inn");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("names");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("sname");

                    b.Property<int>("SubjectCivilType")
                        .HasColumnType("int")
                        .HasColumnName("civil_type");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("subject_civil", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("CSubjectCivil");
                });

            modelBuilder.Entity("Lotus.LSG.CIndividualPerson", b =>
                {
                    b.HasBaseType("Lotus.LSG.CSubjectCivil");

                    b.Property<int>("IndividualType")
                        .HasColumnType("int")
                        .HasColumnName("individual_type");

                    b.Property<string>("OGRN")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("ogrn");

                    b.HasDiscriminator().HasValue("CIndividualPerson");
                });

            modelBuilder.Entity("Lotus.LSG.CLegalEntityBase", b =>
                {
                    b.HasBaseType("Lotus.LSG.CSubjectCivil");

                    b.Property<string>("KPP")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("kpp");

                    b.Property<string>("LeaderName")
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)")
                        .HasColumnName("leader_name");

                    b.Property<string>("LeaderPost")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("leader_post");

                    b.Property<string>("OGRN")
                        .IsRequired()
                        .ValueGeneratedOnUpdateSometimes()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("ogrn");

                    b.Property<string>("OKPO")
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)")
                        .HasColumnName("okpo");

                    b.Property<string>("OKVED")
                        .HasMaxLength(16)
                        .HasColumnType("varchar(16)")
                        .HasColumnName("okved");

                    b.HasDiscriminator().HasValue("CLegalEntityBase");
                });

            modelBuilder.Entity("Lotus.LSG.CLegalEntity", b =>
                {
                    b.HasBaseType("Lotus.LSG.CLegalEntityBase");

                    b.Property<int>("EntityOwnership")
                        .HasColumnType("int")
                        .HasColumnName("entity_ownership");

                    b.Property<int>("EntityType")
                        .HasColumnType("int")
                        .HasColumnName("entity_type");

                    b.HasDiscriminator().HasValue("CLegalEntity");
                });

            modelBuilder.Entity("Lotus.LSG.CPublicAuthority", b =>
                {
                    b.HasBaseType("Lotus.LSG.CLegalEntityBase");

                    b.Property<int>("PublicType")
                        .HasColumnType("int")
                        .HasColumnName("public_type");

                    b.HasDiscriminator().HasValue("CPublicAuthority");

                    b.HasData(
                        new
                        {
                            Id = 1000L,
                            INN = "7427003567",
                            Name = "Администрация Андреевского сельского поселения",
                            ShortName = "Администрация Андреевского СП",
                            SubjectCivilType = 2,
                            KPP = "745801001",
                            OGRN = "1027401514436",
                            PublicType = 0
                        },
                        new
                        {
                            Id = 1002L,
                            INN = "7427004708",
                            Name = "Администрация Атамановского сельского поселения",
                            ShortName = "Администрация Атамановского СП",
                            SubjectCivilType = 2,
                            KPP = "745801001",
                            OGRN = "1027401514425",
                            PublicType = 0
                        },
                        new
                        {
                            Id = 1003L,
                            INN = "7427004708",
                            Name = "Администрация Белокаменского сельского поселения",
                            ShortName = "Администрация Белокаменского СП",
                            SubjectCivilType = 2,
                            KPP = "745801001",
                            OGRN = "1027401514425",
                            PublicType = 0
                        },
                        new
                        {
                            Id = 1004L,
                            INN = "7427004708",
                            Name = "Администрация Боровского сельского поселения",
                            ShortName = "Администрация Боровского СП",
                            SubjectCivilType = 2,
                            KPP = "745801001",
                            OGRN = "1027401514425",
                            PublicType = 0
                        },
                        new
                        {
                            Id = 1005L,
                            INN = "7427004708",
                            Name = "Администрация Брединского сельского поселения",
                            ShortName = "Администрация Брединского СП",
                            SubjectCivilType = 2,
                            KPP = "745801001",
                            OGRN = "1027401514425",
                            PublicType = 0
                        },
                        new
                        {
                            Id = 1006L,
                            INN = "7427004708",
                            Name = "Администрация Калининского сельского поселения",
                            ShortName = "Администрация Калининского СП",
                            SubjectCivilType = 2,
                            KPP = "745801001",
                            OGRN = "1027401514425",
                            PublicType = 0
                        },
                        new
                        {
                            Id = 1007L,
                            INN = "7427004708",
                            Name = "Администрация Княженского сельского поселения",
                            ShortName = "Администрация Княженского СП",
                            SubjectCivilType = 2,
                            KPP = "745801001",
                            OGRN = "1027401514425",
                            PublicType = 0
                        },
                        new
                        {
                            Id = 1008L,
                            INN = "7427004708",
                            Name = "Администрация Комсомольского сельского поселения",
                            ShortName = "Администрация Комсомольского СП",
                            SubjectCivilType = 2,
                            KPP = "745801001",
                            OGRN = "1027401514425",
                            PublicType = 0
                        },
                        new
                        {
                            Id = 1009L,
                            INN = "7427004708",
                            Name = "Администрация Наследницкого сельского поселения",
                            ShortName = "Администрация Наследницкого СП",
                            SubjectCivilType = 2,
                            KPP = "745801001",
                            OGRN = "1027401514425",
                            PublicType = 0
                        },
                        new
                        {
                            Id = 1010L,
                            INN = "7427004708",
                            Name = "Администрация Павловского сельского поселения",
                            ShortName = "Администрация Павловского СП",
                            SubjectCivilType = 2,
                            KPP = "745801001",
                            OGRN = "1027401514425",
                            PublicType = 0
                        },
                        new
                        {
                            Id = 1011L,
                            INN = "7427004708",
                            Name = "Администрация Рымникского сельского поселения",
                            ShortName = "Администрация Рымникского СП",
                            SubjectCivilType = 2,
                            KPP = "745801001",
                            OGRN = "1027401514425",
                            PublicType = 0
                        },
                        new
                        {
                            Id = 1012L,
                            INN = "7427004708",
                            Name = "Администрация Брединского муниципального района",
                            ShortName = "Администрация района",
                            SubjectCivilType = 2,
                            KPP = "745801001",
                            OGRN = "1027401514425",
                            PublicType = 0
                        });
                });

            modelBuilder.Entity("Lotus.LSG.CAddressElement", b =>
                {
                    b.HasOne("Lotus.LSG.CAddressStreet", "Street")
                        .WithMany()
                        .HasForeignKey("StreetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Street");
                });

            modelBuilder.Entity("Lotus.LSG.CAddressStreet", b =>
                {
                    b.HasOne("Lotus.LSG.CAddressVillage", "Village")
                        .WithMany("Streets")
                        .HasForeignKey("VillageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Village");
                });

            modelBuilder.Entity("Lotus.LSG.CAddressVillage", b =>
                {
                    b.HasOne("Lotus.LSG.CAddressVillageSettlement", "VillageSettlement")
                        .WithMany("Villages")
                        .HasForeignKey("VillageSettlementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VillageSettlement");
                });

            modelBuilder.Entity("Lotus.LSG.CCertificateCompletion", b =>
                {
                    b.HasOne("Lotus.LSG.CContract", "CContract")
                        .WithMany("CertificateCompletion")
                        .HasForeignKey("ContractId");

                    b.Navigation("CContract");
                });

            modelBuilder.Entity("Lotus.LSG.CContract", b =>
                {
                    b.HasOne("Lotus.LSG.CMunicipalProgramActivity", null)
                        .WithMany("Contracts")
                        .HasForeignKey("CMunicipalProgramActivityId");

                    b.HasOne("Lotus.LSG.CSubjectCivil", "Contractor")
                        .WithMany()
                        .HasForeignKey("ContractorId");

                    b.HasOne("Lotus.LSG.CSubjectCivil", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.Navigation("Contractor");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Lotus.LSG.CMunicipalProgramActivity", b =>
                {
                    b.HasOne("Lotus.LSG.CMunicipalProgramActivity", "ParentActivity")
                        .WithMany("Activities")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Lotus.LSG.CSubjectCivil", "Executor")
                        .WithMany()
                        .HasForeignKey("ExecutorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lotus.LSG.CMunicipalProgramIndicator", "Indicator")
                        .WithMany()
                        .HasForeignKey("IndicatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lotus.LSG.CMunicipalProgram", "Program")
                        .WithMany("Activities")
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lotus.LSG.CMunicipalSubProgram", "SubProgram")
                        .WithMany("Activities")
                        .HasForeignKey("SubProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Executor");

                    b.Navigation("Indicator");

                    b.Navigation("ParentActivity");

                    b.Navigation("Program");

                    b.Navigation("SubProgram");
                });

            modelBuilder.Entity("Lotus.LSG.CMunicipalProgramIndicator", b =>
                {
                    b.HasOne("Lotus.LSG.CMunicipalProgram", "Program")
                        .WithMany("Indicators")
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lotus.LSG.CMunicipalSubProgram", "SubProgram")
                        .WithMany("Indicators")
                        .HasForeignKey("SubProgramId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Program");

                    b.Navigation("SubProgram");
                });

            modelBuilder.Entity("Lotus.LSG.CMunicipalSubProgram", b =>
                {
                    b.HasOne("Lotus.LSG.CMunicipalProgram", "Program")
                        .WithMany("SubPrograms")
                        .HasForeignKey("ProgramId");

                    b.Navigation("Program");
                });

            modelBuilder.Entity("Lotus.LSG.CAddressVillage", b =>
                {
                    b.Navigation("Streets");
                });

            modelBuilder.Entity("Lotus.LSG.CAddressVillageSettlement", b =>
                {
                    b.Navigation("Villages");
                });

            modelBuilder.Entity("Lotus.LSG.CContract", b =>
                {
                    b.Navigation("CertificateCompletion");
                });

            modelBuilder.Entity("Lotus.LSG.CMunicipalProgram", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("Indicators");

                    b.Navigation("SubPrograms");
                });

            modelBuilder.Entity("Lotus.LSG.CMunicipalProgramActivity", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("Contracts");
                });

            modelBuilder.Entity("Lotus.LSG.CMunicipalSubProgram", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("Indicators");
                });
#pragma warning restore 612, 618
        }
    }
}
