//=====================================================================================================================
// Проект: Lotus.Web
// Раздел: Общий модуль
// Подраздел: Подсистема аккаунта
// Автор: MagistrBYTE aka DanielDem <dementevds@gmail.com>
//---------------------------------------------------------------------------------------------------------------------
/** \file LotusWebAccountAuthorizeApi.cs
*		Определение интерфейса для реализации минимального механизма авторизации пользователя.
*/
//---------------------------------------------------------------------------------------------------------------------
// Версия: 1.0.0.0
// Последнее изменение от 27.03.2022
//=====================================================================================================================
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Json;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Threading.Tasks;
//=====================================================================================================================
namespace Lotus.Web
{
	namespace Account
	{
		//-------------------------------------------------------------------------------------------------------------
		//! \addtogroup WebCommonAccount
		/*@{*/
		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Интерфейс для реализации минимального механизма авторизации пользователя
		/// </summary>
		//-------------------------------------------------------------------------------------------------------------
		public interface ILotusAuthorizeApi
		{
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Аутентификация пользователя
			/// </summary>
			/// <param name="login_parameters">Параметры для аутентификации пользователя</param>
			/// <returns>Задача</returns>
			//---------------------------------------------------------------------------------------------------------
			Task Login(CLoginParameters login_parameters);

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Регистрация нового пользователя
			/// </summary>
			/// <param name="register_parameters">Параметры для регистрации нового пользователя</param>
			/// <returns>Задача</returns>
			//---------------------------------------------------------------------------------------------------------
			Task Register(CRegisterParameters register_parameters);

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Выход из статуса аутентификации пользователя
			/// </summary>
			/// <returns>Задача</returns>
			//---------------------------------------------------------------------------------------------------------
			Task Logout();

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Получение информации о статусе аутентификации текущего пользователя
			/// </summary>
			/// <returns>Задача</returns>
			//---------------------------------------------------------------------------------------------------------
			Task<CUserAuthorizeInfo> GetUserAuthorizeInfo();
		}

		//-------------------------------------------------------------------------------------------------------------
		/// <summary>
		/// Класс реализующий минимальный механизм авторизации пользователя с помощью соответствующего контролёра
		/// </summary>
		//-------------------------------------------------------------------------------------------------------------
		public class CAuthorizeApi : ILotusAuthorizeApi
		{
			#region ======================================= СТАТИЧЕСКИЕ ДАННЫЕ ========================================
			/// <summary>
			/// Клиент HttpClient для работы сервиса
			/// </summary>
			public static String HttpClientName = "AuthorizeClient";
			#endregion

			#region ======================================= ДАННЫЕ ====================================================
			private readonly HttpClient mHttpClient;
			#endregion

			#region ======================================= СВОЙСТВА ==================================================
			/// <summary>
			/// Клиент HttpClient
			/// </summary>
			public HttpClient Client
			{
				get { return (mHttpClient); }
			}
			#endregion

			#region ======================================= КОНСТРУКТОРЫ ==============================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Конструктор инициализирует объект класса указанными параметрами
			/// </summary>
			/// <param name="client_factory">Фабрика для создания и конфигурации клиентов Http</param>
			//---------------------------------------------------------------------------------------------------------
			public CAuthorizeApi(IHttpClientFactory client_factory)
			{
				mHttpClient = client_factory.CreateClient(HttpClientName);
			}
			#endregion

			#region ======================================= ОБЩИЕ МЕТОДЫ ==============================================
			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Аутентификация пользователя
			/// </summary>
			/// <param name="login_parameters">Параметры для аутентификации пользователя</param>
			/// <returns>Задача</returns>
			//---------------------------------------------------------------------------------------------------------
			public async Task Login(CLoginParameters login_parameters)
			{
				var result = await mHttpClient.PostAsJsonAsync("api/Authorize/Login", login_parameters);
				
				if (result.StatusCode == HttpStatusCode.BadRequest)
				{
					throw new Exception(await result.Content.ReadAsStringAsync());
				}

				result.EnsureSuccessStatusCode();
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Регистрация нового пользователя
			/// </summary>
			/// <param name="register_parameters">Параметры для регистрации нового пользователя</param>
			/// <returns>Задача</returns>
			//---------------------------------------------------------------------------------------------------------
			public async Task Register(CRegisterParameters register_parameters)
			{
				var result = await mHttpClient.PostAsJsonAsync("api/Authorize/Register", register_parameters);
				
				if (result.StatusCode == HttpStatusCode.BadRequest)
				{
					throw new Exception(await result.Content.ReadAsStringAsync());
				}

				result.EnsureSuccessStatusCode();
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Выход из статуса аутентификации пользователя
			/// </summary>
			/// <returns>Задача</returns>
			//---------------------------------------------------------------------------------------------------------
			public async Task Logout()
			{
				var result = await mHttpClient.PostAsync("api/Authorize/Logout", null);
				result.EnsureSuccessStatusCode();
			}

			//---------------------------------------------------------------------------------------------------------
			/// <summary>
			/// Получение информации о статусе аутентификации текущего пользователя
			/// </summary>
			/// <returns>Задача</returns>
			//---------------------------------------------------------------------------------------------------------
			public async Task<CUserAuthorizeInfo> GetUserAuthorizeInfo()
			{
				return await mHttpClient.GetFromJsonAsync<CUserAuthorizeInfo>("api/Authorize/UserAuthorizeInfo");
			}
			#endregion
		}
		//-------------------------------------------------------------------------------------------------------------
		/*@}*/
		//-------------------------------------------------------------------------------------------------------------
	}
}
//=====================================================================================================================