@page "/Road/Activities"

@layout Road

@inject CRepositoryDatabase repositoryDBContext;

@if (Activities == null)
{
	<div style="position:relative; width:100%; text-align:center">
		<h2>Мероприятия по дорожной деятельности</h2>
		<p><i class="fas fa-spinner fa-spin"></i>  Идет загрузка данных...</p>
	</div>
}
else
{
	<div class=".container-fluid">
		<div class="row m-1">
			<div class="col">
                <DataGrid TItem="CMunicipalProgramActivity" Data="@Activities"
                    @bind-SelectedRow="@SelectedActivity"
                    Bordered="true"
                    EditMode="DataGridEditMode.Form" 
                    Editable="true"
                    RowInserted="@AddCallback"
                    RowUpdated="@UpdateCallback"
                    RowRemoved="@DeleleCallback"
                    Resizable="true"
                    PageSize="12"
                    ShowPager="true"
                    ResizeMode="TableResizeMode.Header"
                    Responsive="true"
                    CommandMode="DataGridCommandMode.ButtonRow"

                    Filterable="true"
                    FilterMethod="DataGridFilterMethod.StartsWith"
                    >
                    <DataGridColumns>

                        <DataGridCommandColumn TItem="CMunicipalProgramActivity" NewCommandAllowed="false" EditCommandAllowed="false" DeleteCommandAllowed="false"  >
                            <SaveCommandTemplate>
                                <Button ElementId="btnSave" Type="ButtonType.Submit" PreventDefaultOnSubmit Color="Color.Primary" Clicked="@context.Clicked">@context.LocalizationString</Button>
                            </SaveCommandTemplate>
                            <CancelCommandTemplate>
                                <Button ElementId="btnCancel" Color="Color.Secondary" Clicked="@context.Clicked">@context.LocalizationString</Button>
                            </CancelCommandTemplate>
                        </DataGridCommandColumn>


                        <DataGridCommandColumn TItem="CMunicipalProgramActivity" />
            
                            <DataGridSelectColumn TItem="CMunicipalProgramActivity" Field="@nameof(CMunicipalProgramActivity.SubProgramId)" Caption="Подпрограмма" Editable="true">
                            <DisplayTemplate>
                                @((context as CMunicipalProgramActivity)?.SubProgram?.ShortName)
                            </DisplayTemplate>
                            <EditTemplate>
                                <Select TValue="Int64" SelectedValue="@((Int64)(((CellEditContext)context).CellValue ?? 1L))"
                                    SelectedValueChanged="@(v => 
                                            {
                                                var item = SubPrograms.FirstOrDefault(x => x.Id == v);
                                                ((CellEditContext)context).CellValue = item != null ? item.Id : 0;
                                            })">
                                    @foreach (var program in SubPrograms)
                                    {
                                        <SelectItem TValue="Int64" Value="@(program.Id)">@program.ShortName</SelectItem>
                                    }
                                </Select>
                            </EditTemplate>
                        </DataGridSelectColumn>
                        <DataGridSelectColumn TItem="CMunicipalProgramActivity" Field="@nameof(CMunicipalProgramActivity.IndicatorId)" Caption="Индикатор" Editable="true">
                            <DisplayTemplate>
                                @((context as CMunicipalProgramActivity)?.Indicator?.Name)
                            </DisplayTemplate>
                            <EditTemplate>
                                <Select TValue="Int64" SelectedValue="@((Int64)(((CellEditContext)context).CellValue ?? 1L))"
                                    SelectedValueChanged="@(v => 
                                            {
                                                var item = Indicators.FirstOrDefault(x => x.Id == v);
                                                ((CellEditContext)context).CellValue = item != null ? item.Id : 0;
                                            })">
                                    @foreach (var indicator in Indicators)
                                    {
                                        <SelectItem TValue="Int64" Value="@(indicator.Id)">@indicator.Name</SelectItem>
                                    }
                                </Select>
                            </EditTemplate>
                        </DataGridSelectColumn>
                        <DataGridColumn TItem="CMunicipalProgramActivity" Field="@nameof(CMunicipalProgramActivity.Year)" Caption="Год" Sortable="true" Editable="true" />
                        <DataGridColumn TItem="CMunicipalProgramActivity" Field="@nameof(CMunicipalProgramActivity.Name)" Caption="Название" Sortable="true" Editable="true" />
                        <DataGridColumn TItem="CMunicipalProgramActivity" Field="@nameof(CMunicipalProgramActivity.Desc)" Caption="Описание" Sortable="true" Editable="true" />
                        <DataGridColumn TItem="CMunicipalProgramActivity" Field="@nameof(CMunicipalProgramActivity.PlanedValue)" Caption="Значение" Sortable="true" Editable="true" />
                        <DataGridColumn TItem="CMunicipalProgramActivity" Field="@nameof(CMunicipalProgramActivity.PriceLocal)" Caption="Стоимость (МБ)" Sortable="true" Editable="true" />
                        <DataGridColumn TItem="CMunicipalProgramActivity" Field="@nameof(CMunicipalProgramActivity.PriceRegional)" Caption="Стоимость (ОБ)" Sortable="true" Editable="true" />

                        <DataGridSelectColumn TItem="CMunicipalProgramActivity" Field="@nameof(CMunicipalProgramActivity.ExecutorId)" Caption="Исполнитель" Editable="true">
                            <DisplayTemplate>
                                @((context as CMunicipalProgramActivity)?.Executor?.ShortName)
                            </DisplayTemplate>
                            <EditTemplate>
                                <Select TValue="Int64" SelectedValue="@((Int64)(((CellEditContext)context).CellValue ?? 1L))"
                                    SelectedValueChanged="@(v => 
                                            {
                                                var item = Executors.FirstOrDefault(x => x.Id == v);
                                                ((CellEditContext)context).CellValue = item != null ? item.Id : 0;
                                            })">
                                    @foreach (var executors in Executors)
                                    {
                                        <SelectItem TValue="Int64" Value="@(executors.Id)">@executors.ShortName</SelectItem>
                                    }
                                </Select>
                            </EditTemplate>
                        </DataGridSelectColumn>

                        <DataGridSelectColumn TItem="CMunicipalProgramActivity" Field="@nameof(CMunicipalProgramActivity.Stage)" Caption="Этап" Sortable="true" Editable="true">
                            <DisplayTemplate>
                                @{
                                    CMunicipalProgramActivity currently_edited = context as CMunicipalProgramActivity;
                                    String status = currently_edited.Stage.GetDescriptionOrName();
                                    <text>@status</text>
                                }
                            </DisplayTemplate>
                            <EditTemplate>
                                @{
                                    <Select TValue="TProgramActivityStage" SelectedValue="@((TProgramActivityStage)(context.CellValue))"
                                     SelectedValueChanged="@((v) => { context.UpdateCell(nameof(CMunicipalProgramActivity.Stage), v);})">
                                        @foreach (var item in CProgramActivityStageModel.Data)
                                        {
                                            <SelectItem TValue="TProgramActivityStage" Value="@(item.Value)">@item.Desc</SelectItem>
                                        }
                                    </Select>
                                }
                            </EditTemplate>
                        </DataGridSelectColumn>  
                    </DataGridColumns>

                    <ButtonRowTemplate>
                        <Button Color="Color.Success" Clicked="context.NewCommand.Clicked">Новое</Button>
                        <Button Color="Color.Primary" Disabled="(SelectedActivity is null)" Clicked="context.EditCommand.Clicked">Редактировать</Button>
                        <Button Color="Color.Danger" Disabled="(SelectedActivity is null)" Clicked="context.DeleteCommand.Clicked">Удалить</Button>
                        <Button Color="Color.Link" Clicked="context.ClearFilterCommand.Clicked">Очистить фильтр</Button>
                    </ButtonRowTemplate>

                </DataGrid>
			</div>
		</div>
		<div class="row m-1">
			<div class="col-9 bg-light">
				@if (SelectedActivity != null)
				{

				}
				else
				{
					<h4 style="align-content:center">Выберите мероприятие для просмотра его этапов</h4>
				}
			</div>
		</div>
	</div>
}

@code
{
    //
    // СВОЙСТВА
    //
    /// <summary>
    /// Статус авторизации пользователя
    /// </summary>
    [CascadingParameter]
    Task<AuthenticationState> AuthenticationState { get; set; }

    /// <summary>
    /// Список мероприятий дорожной деятельности
    /// </summary>
    List<CMunicipalProgramActivity> Activities { get; set; }

    /// <summary>
    /// Список выбранных мероприятий дорожной деятельности
    /// </summary>
    List<CMunicipalProgramActivity> SelectedActivities { get; set; } = new List<CMunicipalProgramActivity>();

    /// <summary>
    /// Первое выбранное мероприятие по дорожной деятельности
    /// </summary>
    CMunicipalProgramActivity SelectedActivity { get; set; }

    /// <summary>
    /// Список подпрограмм по дорожной деятельности
    /// </summary>
    List<CMunicipalSubProgram> SubPrograms { get; set; }

    /// <summary>
    /// Список ответственных исполнителей по дорожной деятельности
    /// </summary>
    List<CLegalEntityBase> Executors { get; set; }

    /// <summary>
    /// Список подрядчиков по дорожной деятельности
    /// </summary>
    List<CSubjectCivil> Contractors { get; set; }

    /// <summary>
    /// Список индикаторов по дорожной деятельности
    /// </summary>
    List<CMunicipalProgramIndicator> Indicators { get; set; }

    //
    // МЕТОДЫ КОМПОНЕНТА
    //
    /// <summary>
    ///
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        // Подпрограммы
        SubPrograms = await repositoryDBContext.MunicipalSubPrograms
            .Where(sub_srogram => sub_srogram.ProgramId.GetValueOrDefault() == XMunicipalProgramData.ROAD_Id)
            .ToListAsync();

        // Индикаторы
        Indicators = await repositoryDBContext.MunicipalIndicators
            .Where(indicator => indicator.ProgramId.GetValueOrDefault() == XMunicipalProgramData.ROAD_Id)
            .ToListAsync();

        // Ответственные исполнители
        Executors = new List<CLegalEntityBase>();

        // 1) Органы власти
        Executors.AddRange(await repositoryDBContext.SubjectAuthorities
        .Where(subject => (subject.PublicType == TPublicAuthorityType.Village || subject.PublicType == TPublicAuthorityType.Municipal))
        .ToListAsync());

        // 2) Юридические лица
        Executors.AddRange(await repositoryDBContext.SubjectEntities
            .Where(subject => (subject.EntityOwnership == TLegalEntityOwnership.Municipal && subject.EntityType == TLegalEntityType.Institution))
            .ToListAsync());

        // Подрядчики
        Contractors = new List<CSubjectCivil>();
        Contractors.AddRange(await repositoryDBContext.SubjectPersons.ToListAsync());
        Contractors.AddRange(await repositoryDBContext.SubjectEntities
            .Where(subject => (subject.EntityOwnership == TLegalEntityOwnership.Private && subject.EntityType == TLegalEntityType.LimitedСompany))
            .ToListAsync());

        // Мероприятия
        Activities = await repositoryDBContext.MunicipalActivities
            .Where(sub_srogram => sub_srogram.ProgramId.GetValueOrDefault() == XMunicipalProgramData.ROAD_Id)
            .Include(v => v.Activities)
            .Include(v => v.Contracts)
            .ThenInclude(c => c.CertificateCompletions)
            .ToListAsync();
    }

    /// <summary>
    /// Обновление представления
    /// </summary>
    /// <returns></returns>
    protected async Task UpdateView()
    {

    }

    /// <summary>
    /// Добавление данных
    /// </summary>
    /// <param name="row"></param>
    private async Task AddCallback(SavedRowItem<CMunicipalProgramActivity, Dictionary<String, Object>> row)
    {
        CMunicipalProgramActivity activity = row.Item;

        if (activity.SubProgramId == null)
        {
            activity.SubProgramId = XMunicipalSubProgramData.ROAD_REPAIRS_Id;
            activity.ProgramId = XMunicipalProgramData.ROAD_Id;
        }
        else
        {
            activity.ProgramId =
            repositoryDBContext.MunicipalSubPrograms.Find(activity.SubProgramId)?.ProgramId;
        }
        if(activity.IndicatorId == null)
        {
            activity.IndicatorId = Indicators.First().Id;
        }
        if(activity.ExecutorId == null)
        {
            activity.ExecutorId = Executors.First().Id;
        }

        // Добавляем и обновляем базу данных
        repositoryDBContext.MunicipalActivities.Add(activity);
        await repositoryDBContext.SaveChangesAsync();
    }

    /// <summary>
    /// Обновление данных
    /// </summary>
    /// <param name="row"></param>
    private async Task UpdateCallback(SavedRowItem<CMunicipalProgramActivity, Dictionary<String, Object>> row)
    {
        CMunicipalProgramActivity edit_item = row.Item;
        if (edit_item != null)
        {
            foreach(var props in row.Values)
            {
                if(props.Key == nameof(CMunicipalProgramActivity.Name))
                {
                    edit_item.Name = (String)props.Value;
                }
                if(props.Key == nameof(CMunicipalProgramActivity.Desc))
                {
                    edit_item.Desc = (String)props.Value;
                }
                //if(props.Key == nameof(CMunicipalProgramActivity.ValueUnit))
                //{
                //    //edit_item.ValueUnit = (String)props.Value;
                //}
            }

            // Обновляем базу данных
            repositoryDBContext.MunicipalActivities.Update(edit_item);
            await repositoryDBContext.SaveChangesAsync();
        }
    }

    /// <summary>
    /// Удаление данных
    /// </summary>
    /// <returns></returns>
    private async Task DeleleCallback(CMunicipalProgramActivity activity)
    {
        // Удаляем с базы данных
        repositoryDBContext.MunicipalActivities.Remove(activity);
        await repositoryDBContext.SaveChangesAsync();
    }
 }