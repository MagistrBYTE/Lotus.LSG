@page "/Handbook/MunicipalSubProgram"

@layout Handbook

@inject CRepositoryDatabase repositoryDBContext;

<h4 style="margin: 12px">Муниципальные подпрограммы</h4>

@if (MunicipalSubPrograms == null || MunicipalPrograms == null)
{
    <div style="position:absolute; top:30vh; width:100%; text-align:center">
        <h1>Муниципальные подпрограммы</h1>
        <p><i class="fas fa-spinner fa-spin"></i>Идет загрузка данных...</p>
    </div>
}
else
{
    <DataGrid TItem="CMunicipalSubProgram" Data="@MunicipalSubPrograms"
        @bind-SelectedRow="@SelectedRow"
        Bordered="true"
        EditMode="DataGridEditMode.Inline" 
        Editable="AuthenticationState.Result.User.Identity.IsAuthenticated"
        RowInserted="@AddCallback"
        RowUpdated="@UpdateCallback"
        RowRemoved="@DeleleCallback"
        Resizable="true"
        PageSize="12"
        ResizeMode="TableResizeMode.Header">
        <DataGridColumns>
            <DataGridCommandColumn TItem="CMunicipalSubProgram" />
            <DataGridColumn TItem="CMunicipalSubProgram" Field="@nameof(CMunicipalSubProgram.Id)" Caption="ИД" Sortable="true" Editable="false" />
            
             <DataGridSelectColumn TItem="CMunicipalSubProgram" Field="@nameof(CMunicipalSubProgram.ProgramId)" Caption="Программа" Editable="true">
                <DisplayTemplate>
                    @((context as CMunicipalSubProgram)?.Program?.ShortName)
                </DisplayTemplate>
                <EditTemplate>
                    <Select TValue="Int64?" SelectedValue="@((Int64?)(((CellEditContext)context).CellValue))"
                        SelectedValueChanged="@(v => 
                                {
                                    var item = MunicipalPrograms.FirstOrDefault(x => x.Id == v);
                                    ((CellEditContext)context).CellValue = item != null ? item.Id : 0;
                                })">
                        @foreach (var program in MunicipalPrograms)
                        {
                            <SelectItem TValue="Int64" Value="@(program.Id)">@program.ShortName</SelectItem>
                        }
                    </Select>
                </EditTemplate>
            </DataGridSelectColumn>

            <DataGridColumn TItem="CMunicipalSubProgram" Field="@nameof(CMunicipalSubProgram.Number)" Caption="Номер" Sortable="true" Editable="true" />
            <DataGridColumn TItem="CMunicipalSubProgram" Field="@nameof(CMunicipalSubProgram.Name)" Caption="Полное имя" Sortable="true" Editable="true" />
            <DataGridColumn TItem="CMunicipalSubProgram" Field="@nameof(CMunicipalSubProgram.ShortName)" Caption="Краткое имя" Sortable="true" Editable="true" />
        </DataGridColumns>
    </DataGrid>
}

@code
{
    /// <summary>
    /// Статус авторизации пользователя
    /// </summary>
    [CascadingParameter]
    Task<AuthenticationState> AuthenticationState { get; set; }

        /// <summary>
    /// Список программ
    /// </summary>
    public List<CMunicipalProgram> MunicipalPrograms { get; set; }

    /// <summary>
    /// Список подпрограмм
    /// </summary>
    public List<CMunicipalSubProgram> MunicipalSubPrograms { get; set; }

    /// <summary>
    /// Выбранная строка
    /// </summary>
    public CMunicipalSubProgram SelectedRow { get; set; }

    /// <summary>
    /// 
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        MunicipalPrograms = await repositoryDBContext.MunicipalPrograms.ToListAsync();
        MunicipalSubPrograms = await repositoryDBContext.MunicipalSubPrograms.ToListAsync();
    }

    /// <summary>
    /// Добавление данных
    /// </summary>
    /// <param name="row"></param>
    private async Task AddCallback(SavedRowItem<CMunicipalSubProgram, Dictionary<String, Object>> row)
    {
        CMunicipalSubProgram municipal_sub_program = row.Item;

        // Добавляем и обновляем базу данных
        repositoryDBContext.MunicipalSubPrograms.Add(municipal_sub_program);
        await repositoryDBContext.SaveChangesAsync();
    }

    /// <summary>
    /// Обновление данных
    /// </summary>
    /// <param name="row"></param>
    private async Task UpdateCallback(SavedRowItem<CMunicipalSubProgram, Dictionary<String, Object>> row)
    {
        CMunicipalSubProgram edit_item = row.Item;
        if (edit_item != null)
        {
            foreach(var props in row.Values)
            {
                if(props.Key == nameof(CMunicipalSubProgram.Name))
                {
                    edit_item.Name = (String)props.Value;
                }
                if(props.Key == nameof(CMunicipalSubProgram.ShortName))
                {
                    edit_item.ShortName = (String)props.Value;
                }
                if(props.Key == nameof(CMunicipalSubProgram.Number))
                {
                    edit_item.Number = (String)props.Value;
                }
                if(props.Key == nameof(CMunicipalSubProgram.Desc))
                {
                    edit_item.Desc = (String)props.Value;
                }
            }

            // Обновляем базу данных
            repositoryDBContext.MunicipalSubPrograms.Update(edit_item);
            await repositoryDBContext.SaveChangesAsync();
        }
    }

    /// <summary>
    /// Удаление данных
    /// </summary>
    /// <returns></returns>
    private async Task DeleleCallback(CMunicipalSubProgram municipal_sub_program)
    {
        // Удаляем с базы данных
        repositoryDBContext.MunicipalSubPrograms.Remove(municipal_sub_program);
        await repositoryDBContext.SaveChangesAsync();
    }
}