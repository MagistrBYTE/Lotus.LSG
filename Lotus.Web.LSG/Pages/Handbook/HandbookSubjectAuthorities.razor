@page "/Handbook/SubjectAuthorities"

@layout Handbook

@inject CRepositoryDatabase RepositoryDatabase;

@if (SubjectAuthorities == null)
{
    <div style="position:relative; width:100%; text-align:center">
        <h2>Органы публичной власти</h2>
        <p><i class="fas fa-spinner fa-spin"></i>  Идет загрузка данных...</p>
    </div>
}
else
{
    <DataGrid TItem="CPublicAuthority" Data="@SubjectAuthorities"
              Bordered="true"
              EditMode="DataGridEditMode.Inline"
              Editable="AuthenticationState.Result.User.Identity.IsAuthenticated"
              RowInserted="@AddPublicAuthority"
              RowUpdated="@UpdatePublicAuthority"
              RowRemoved="@DelelePublicAuthority"
              Resizable="true"
              PageSize="12"
              ResizeMode="TableResizeMode.Header">

        <DataGridCommandColumn TItem="CPublicAuthority" />
        <DataGridColumn TItem="CPublicAuthority" Field="@nameof(CPublicAuthority.Id)" Caption="ИД" Sortable="true" Editable="false" />
        <DataGridColumn TItem="CPublicAuthority" Field="@nameof(CPublicAuthority.Name)" Caption="Полное имя" Sortable="true" Editable="true" />
        <DataGridColumn TItem="CPublicAuthority" Field="@nameof(CPublicAuthority.ShortName)" Caption="Краткое имя" Sortable="true" Editable="true" />

        <DataGridSelectColumn TItem="CPublicAuthority" Field="@nameof(CPublicAuthority.PublicType)" Caption="Уровень" Sortable="true" Editable="true">
            <DisplayTemplate>
                @{
                    CPublicAuthority currently_edited = context as CPublicAuthority;
                    String status = currently_edited.PublicType.GetDescriptionOrName();
                    <text>@status</text>
                }
            </DisplayTemplate>
            <EditTemplate>
                @{
                    <Select TValue="TPublicAuthorityType" SelectedValue="@((TPublicAuthorityType)(context.CellValue))"
                     SelectedValueChanged="@((v) => { context.UpdateCell(nameof(CPublicAuthority.PublicType), v);})">
                        @foreach (var item in CPublicAuthorityTypeModel.Data)
                        {
                            <SelectItem TValue="TPublicAuthorityType" Value="@(item.Value)">@item.Desc</SelectItem>
                        }
                    </Select>
                }
            </EditTemplate>
        </DataGridSelectColumn>

        <DataGridColumn TItem="CPublicAuthority" Field="@nameof(CPublicAuthority.INN)" Caption="ИНН" Sortable="true" Editable="true" />
        <DataGridColumn TItem="CPublicAuthority" Field="@nameof(CPublicAuthority.OGRN)" Caption="ОГРН" Sortable="true" Editable="true" />

    </DataGrid>
}

@code
{
    //
    // СВОЙСТВА
    //
    /// <summary>
    /// Статус авторизации пользователя
    /// </summary>
    [CascadingParameter]
    Task<AuthenticationState> AuthenticationState { get; set; }

    /// <summary>
    /// Список органов власти
    /// </summary>
    List<CPublicAuthority> SubjectAuthorities { get; set; }

    //
    // МЕТОДЫ КОМПОНЕНТА
    //
    protected override async Task OnInitializedAsync()
    {
        SubjectAuthorities = await RepositoryDatabase.SubjectAuthorities.ToListAsync();
    }

    //
    // ОБЩИЕ МЕТОДЫ
    //
    /// <summary>
    /// Обновления представления
    /// </summary>
    /// <returns></returns>
    private async Task UpdateView()
    {
        SubjectAuthorities = await RepositoryDatabase.SubjectAuthorities.ToListAsync();
    }

    /// <summary>
    /// Добавления нового органа власти
    /// </summary>
    /// <returns></returns>
    private async Task AddPublicAuthority(SavedRowItem<CPublicAuthority, Dictionary<String, Object>> row)
    {
        CPublicAuthority public_authority = row.Item;
        public_authority.Name = "Орган власти";

        // Добавляем и обновляем базу данных
        RepositoryDatabase.SubjectAuthorities.Add(public_authority);
        await RepositoryDatabase.SaveChangesAsync();

        // Обновляем представление
        //await UpdateView();
    }

    /// <summary>
    /// Обновление данных органа власти
    /// </summary>
    /// <param name="args"></param>
    /// <returns></returns>
    private async Task UpdatePublicAuthority(SavedRowItem<CPublicAuthority, Dictionary<String, Object>> row)
    {
        CPublicAuthority edit_item = row.Item;
        if (edit_item != null)
        {
            foreach(var props in row.Values)
            {
                if(props.Key == nameof(CPublicAuthority.Name))
                {
                    edit_item.Name = (String)props.Value;
                }
                if(props.Key == nameof(CPublicAuthority.ShortName))
                {
                    edit_item.ShortName = (String)props.Value;
                }
                if(props.Key == nameof(CPublicAuthority.PublicType))
                {
                    edit_item.PublicType = (TPublicAuthorityType)props.Value;
                }
                if(props.Key == nameof(CPublicAuthority.INN))
                {
                    edit_item.INN = (String)props.Value;
                }
                if(props.Key == nameof(CPublicAuthority.OGRN))
                {
                    edit_item.OGRN = (String)props.Value;
                }
                if(props.Key == nameof(CPublicAuthority.KPP))
                {
                    edit_item.KPP = (String)props.Value;
                }
            }

            // Обновляем базу данных
            RepositoryDatabase.SubjectAuthorities.Update(edit_item);
            await RepositoryDatabase.SaveChangesAsync();
        }
    }

    /// <summary>
    /// Удаление органа власти
    /// </summary>
    /// <param name="public_authority"></param>
    /// <returns></returns>
    private async Task DelelePublicAuthority(CPublicAuthority public_authority)
    {
        // Удаляем с базы данных
        RepositoryDatabase.SubjectAuthorities.Remove(public_authority);
        await RepositoryDatabase.SaveChangesAsync();

        // Обновляем представление
        //await UpdateView();
    }
}