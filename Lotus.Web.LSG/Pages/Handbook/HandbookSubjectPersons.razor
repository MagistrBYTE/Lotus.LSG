@page "/Handbook/SubjectPersons"

@layout Handbook

@inject CRepositoryDatabase RepositoryDatabase;

@if (SubjectPersons == null)
{
    <div style="position:relative; width:100%; text-align:center">
        <h2>Физические лица</h2>
        <p><i class="fas fa-spinner fa-spin"></i>  Идет загрузка данных...</p>
    </div>
}
else
{
    <DataGrid TItem="CIndividualPerson" Data="@SubjectPersons"
            Bordered="true"
            EditMode="DataGridEditMode.Inline" 
            Editable="AuthenticationState.Result.User.Identity.IsAuthenticated"
            RowInserted="@AddIndividualPerson"
            RowUpdated="@UpdateIndividualPerson"
            RowRemoved="@DeleleIndividualPerson"
            Resizable="true"
            PageSize="12"
            ResizeMode="TableResizeMode.Header">

            <DataGridCommandColumn TItem="CIndividualPerson" />
            <DataGridColumn TItem="CIndividualPerson" Field="@nameof(CIndividualPerson.Id)" Caption="ИД" Sortable="true" Editable="false" />
            <DataGridColumn TItem="CIndividualPerson" Field="@nameof(CIndividualPerson.Name)" Caption="Полное имя" Sortable="true" Editable="true" />
            <DataGridColumn TItem="CIndividualPerson" Field="@nameof(CIndividualPerson.ShortName)" Caption="Краткое имя" Sortable="true" Editable="true" />
            
            <DataGridSelectColumn  TItem="CIndividualPerson" Field="@nameof(CIndividualPerson.IndividualType)" Caption="Тип" Sortable="true" Editable="true">
                <DisplayTemplate>
                    @{
                        CIndividualPerson currently_edited = context as CIndividualPerson;
                        String status = currently_edited.IndividualType.GetDescriptionOrName();
                        <text>@status</text>
                    }
                </DisplayTemplate>
                <EditTemplate>
                    @{
                        <Select TValue="TIndividualType" SelectedValue="@((TIndividualType)(context.CellValue))"
                        SelectedValueChanged="@((v) => { context.UpdateCell(nameof(CIndividualPerson.IndividualType), v);})">
                        @foreach (var item in CIndividualTypeModel.Data)
                        {
                            <SelectItem TValue="TIndividualType" Value="@(item.Value)">@item.Desc</SelectItem>
                        }
                        </Select>
                    }
                </EditTemplate>
            </DataGridSelectColumn>

            <DataGridColumn TItem="CIndividualPerson" Field="@nameof(CIndividualPerson.INN)" Caption="ИНН" Sortable="true" Editable="true" />
            <DataGridColumn TItem="CIndividualPerson" Field="@nameof(CIndividualPerson.OGRN)" Caption="ОГРН" Sortable="true" Editable="true" />

    </DataGrid>
}

@code
{
    //
    // СВОЙСТВА
    //
    /// <summary>
    /// Статус авторизации пользователя
    /// </summary>
    [CascadingParameter]
    Task<AuthenticationState> AuthenticationState { get; set; }

    /// <summary>
    /// Список физических лиц
    /// </summary>
    List<CIndividualPerson> SubjectPersons { get; set; }

    //
    // МЕТОДЫ КОМПОНЕНТА
    //
    protected override async Task OnInitializedAsync()
    {
        SubjectPersons = await RepositoryDatabase.SubjectPersons.ToListAsync();
    }

    //
    // ОБЩИЕ МЕТОДЫ
    //
    /// <summary>
    /// Обновления представления
    /// </summary>
    /// <returns></returns>
    private async Task UpdateView()
    {
        SubjectPersons = await RepositoryDatabase.SubjectPersons.ToListAsync();
    }

    /// <summary>
    /// Добавления нового физического лица
    /// </summary>
    /// <returns></returns>
    private async Task AddIndividualPerson(SavedRowItem<CIndividualPerson, Dictionary<String, Object>> row)
    {
        CIndividualPerson person = row.Item as CIndividualPerson;

        // Добавляем и обновляем базу данных
        RepositoryDatabase.SubjectPersons.Add(person);
        await RepositoryDatabase.SaveChangesAsync();

        // Обновляем представление
        //await UpdateView();
    }

    /// <summary>
    /// Обновление данных физического лица
    /// </summary>
    /// <param name="args"></param>
    /// <returns></returns>
    private async Task UpdateIndividualPerson(SavedRowItem<CIndividualPerson, Dictionary<String, Object>> row)
    {
        CIndividualPerson edit_item = row.Item;
        if (edit_item != null)
        {
            foreach(var props in row.Values)
            {
                if(props.Key == nameof(CIndividualPerson.Name))
                {
                    edit_item.Name = (String)props.Value;
                }
                if(props.Key == nameof(CIndividualPerson.ShortName))
                {
                    edit_item.ShortName = (String)props.Value;
                }
                if(props.Key == nameof(CIndividualPerson.IndividualType))
                {
                    edit_item.IndividualType = (TIndividualType)props.Value;
                }
                if(props.Key == nameof(CIndividualPerson.INN))
                {
                    edit_item.INN = (String)props.Value;
                }
                if(props.Key == nameof(CIndividualPerson.OGRN))
                {
                    edit_item.OGRN = (String)props.Value;
                }
            }

            // Обновляем базу данных
            RepositoryDatabase.SubjectPersons.Update(edit_item);
            await RepositoryDatabase.SaveChangesAsync();
        }
    }

    /// <summary>
    /// Удаление физического лица
    /// </summary>
    /// <param name="args"></param>
    /// <returns></returns>
    private async Task DeleleIndividualPerson(CIndividualPerson person)
    {
        // Удаляем с базы данных
        RepositoryDatabase.SubjectPersons.Remove(person);
        await RepositoryDatabase.SaveChangesAsync();

        // Обновляем представление
        //await UpdateView();
    }
}


