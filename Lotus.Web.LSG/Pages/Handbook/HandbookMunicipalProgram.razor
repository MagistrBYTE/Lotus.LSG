@page "/Handbook/MunicipalProgram"

@layout Handbook

@inject CRepositoryDatabase repositoryDBContext;

<h4 style="margin: 12px">Муниципальные программы</h4>

@if (MunicipalPrograms == null)
{
    <div style="position:absolute; top:30vh; width:100%; text-align:center">
        <h1>Муниципальные программы</h1>
        <p><i class="fas fa-spinner fa-spin"></i>Идет загрузка данных...</p>
    </div>
}
else
{
    <DataGrid TItem="CMunicipalProgram" Data="@MunicipalPrograms"
        @bind-SelectedRow="@SelectedRow"
        Bordered="true"
        EditMode="DataGridEditMode.Inline" 
        Editable="AuthenticationState.Result.User.Identity.IsAuthenticated"
        RowInserted="@AddCallback"
        RowUpdated="@UpdateCallback"
        RowRemoved="@DeleleCallback"
        Resizable="true"
        PageSize="12"
        ResizeMode="TableResizeMode.Header">
        <DataGridColumns>
            <DataGridCommandColumn TItem="CMunicipalProgram" />
            <DataGridColumn TItem="CMunicipalProgram" Field="@nameof(CMunicipalProgram.Id)" Caption="ИД" Sortable="true" Editable="false" />
            <DataGridColumn TItem="CMunicipalProgram" Field="@nameof(CMunicipalProgram.Number)" Caption="Номер" Sortable="true" Editable="true" />
            <DataGridColumn TItem="CMunicipalProgram" Field="@nameof(CMunicipalProgram.Name)" Caption="Полное имя" Sortable="true" Editable="true" />
            <DataGridColumn TItem="CMunicipalProgram" Field="@nameof(CMunicipalProgram.ShortName)" Caption="Краткое имя" Sortable="true" Editable="true" />
            <DataGridColumn TItem="CMunicipalProgram" Field="@nameof(CMunicipalProgram.BeginDate)" Caption="Начало" Sortable="true" Editable="true">
                <DisplayTemplate>
                    @{
                        CMunicipalProgram currently_edited = context as CMunicipalProgram;
                        String status = currently_edited.BeginDate.Year.ToString() + " г";
                        <text>@status</text>
                    }
                </DisplayTemplate>
            </DataGridColumn>
            <DataGridColumn TItem="CMunicipalProgram" Field="@nameof(CMunicipalProgram.EndDate)" Caption="Конец" Sortable="true" Editable="true" >
                <DisplayTemplate>
                    @{
                        CMunicipalProgram currently_edited = context as CMunicipalProgram;
                        String status = currently_edited.EndDate.Year.ToString() + " г";
                        <text>@status</text>
                    }
                </DisplayTemplate>
            </DataGridColumn>
        </DataGridColumns>
    </DataGrid>
}

@code
{
    /// <summary>
    /// Статус авторизации пользователя
    /// </summary>
    [CascadingParameter]
    Task<AuthenticationState> AuthenticationState { get; set; }

    /// <summary>
    /// Список программ
    /// </summary>
    public List<CMunicipalProgram> MunicipalPrograms { get; set; }

    /// <summary>
    /// Выбранная строка
    /// </summary>
    public CMunicipalProgram SelectedRow { get; set; }

    /// <summary>
    /// 
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        MunicipalPrograms = await repositoryDBContext.MunicipalPrograms.ToListAsync();
    }

    /// <summary>
    /// Добавление данных
    /// </summary>
    /// <param name="row"></param>
    private async Task AddCallback(SavedRowItem<CMunicipalProgram, Dictionary<String, Object>> row)
    {
        CMunicipalProgram municipal_program = row.Item;

        // Добавляем и обновляем базу данных
        repositoryDBContext.MunicipalPrograms.Add(municipal_program);
        await repositoryDBContext.SaveChangesAsync();
    }

    /// <summary>
    /// Обновление данных
    /// </summary>
    /// <param name="row"></param>
    private async Task UpdateCallback(SavedRowItem<CMunicipalProgram, Dictionary<String, Object>> row)
    {
        CMunicipalProgram edit_item = row.Item;
        if (edit_item != null)
        {
            foreach(var props in row.Values)
            {
                if(props.Key == nameof(CMunicipalProgram.Name))
                {
                    edit_item.Name = (String)props.Value;
                }
                if(props.Key == nameof(CMunicipalProgram.ShortName))
                {
                    edit_item.ShortName = (String)props.Value;
                }
                if(props.Key == nameof(CMunicipalProgram.Number))
                {
                    edit_item.Number = (String)props.Value;
                }
                if(props.Key == nameof(CMunicipalProgram.BeginDate))
                {
                    edit_item.BeginDate = (DateTime)props.Value;
                }
                if(props.Key == nameof(CMunicipalProgram.EndDate))
                {
                    edit_item.EndDate = (DateTime)props.Value;
                }
            }

            // Обновляем базу данных
            repositoryDBContext.MunicipalPrograms.Update(edit_item);
            await repositoryDBContext.SaveChangesAsync();
        }
    }

    /// <summary>
    /// Удаление данных
    /// </summary>
    /// <returns></returns>
    private async Task DeleleCallback(CMunicipalProgram municipal_program)
    {
        // Удаляем с базы данных
        repositoryDBContext.MunicipalPrograms.Remove(municipal_program);
        await repositoryDBContext.SaveChangesAsync();
    }
}